
# Generated by CodiumAI
from VZsampleEnv import MobilePhoneCarrierEnv


import pytest

class Test_Vas:

    # VAS status is 2, and either new_mdn_status or existing_mdn_status is 2. Method updates vas_status to 1 and increases reward by 1.
    def test_vas_status_2_and_mdn_status_2(self):
        new_state = {
            'new_mdn_status': 2,
            'existing_mdn_status': 0,
            'vas_status': 2
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert new_state['vas_status'] == 1
        assert env.reward == 1

    # VAS status is not 2, and either new_mdn_status or existing_mdn_status is not 2. Method decreases reward by 1.
    def test_vas_status_not_2_and_mdn_status_not_2(self):
        new_state = {
            'new_mdn_status': 2,
            'existing_mdn_status': 2,
            'vas_status': 2
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert env.reward == 1

    # VAS status is not 2, and both new_mdn_status and existing_mdn_status are not 2. Method decreases reward by 1.
    def test_vas_status_not_2_and_both_mdn_status_not_2(self):
        new_state = {
            'new_mdn_status': 0,
            'existing_mdn_status': 0,
            'vas_status': 1
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert env.reward == -1

    # VAS status is 2, but neither new_mdn_status nor existing_mdn_status is 2. Method decreases reward by 1.
    def test_vas_status_2_but_both_mdn_status_not_2(self):
        new_state = {
            'new_mdn_status': 0,
            'existing_mdn_status': 0,
            'vas_status': 2
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert env.reward == -1

    # VAS status is 2, but both new_mdn_status and existing_mdn_status are not 2. Method decreases reward by 1.
    def test_vas_status_2_but_both_mdn_status_not_2(self):
        new_state = {
            'new_mdn_status': 0,
            'existing_mdn_status': 0,
            'vas_status': 2
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert env.reward == -1

    # VAS status is not 2, but both new_mdn_status and existing_mdn_status are 2. Method does not update vas_status and decreases reward by 1.
    def test_vas_status_not_2_but_both_mdn_status_2(self):
        new_state = {
            'new_mdn_status': 2,
            'existing_mdn_status': 2,
            'vas_status': 1
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert env.reward == -1

    # VAS is 2, either new_mdn_status or existing_mds_status is 2,  reward in crease by 1
    def test_vas_status_2_and_mdn_status_2(self):
        new_state = {
            'new_mdn_status': 1,
            'existing_mdn_status': 1,
            'vas_status': 0
        }
        env = MobilePhoneCarrierEnv()
        env._vas(new_state)
        assert new_state['vas_status'] == 0
        assert env.reward == -1

    def test_vas(self):
        env = MobilePhoneCarrierEnv()
        new_state = env.observation_space.sample()
        new_state["address_validation_status"] = 1
        new_state["device_validation_status"] = 1
        new_state["sim_validation_status"] = 1
        #
        new_state["new_mdn_status"] = 0
        new_state["existing_mdn_status"] = 2
        new_state["payment_status"] = 1
        new_state["use_existing_mdn"] = 1
        new_state["vas_status"] = 1
        env._vas(new_state)
        assert new_state['vas_status'] == 1
        assert env.reward == -1


    def test_done_flag(self):
        env = MobilePhoneCarrierEnv()
        new_state = env.observation_space.sample()
        new_state["address_validation_status"] = 1
        new_state["device_validation_status"] = 1
        new_state["sim_validation_status"] = 1
        #
        new_state["new_mdn_status"] = 2
        new_state["existing_mdn_status"] = 0
        new_state["payment_status"] = 1
        new_state["use_existing_mdn"] = 0
        new_state["vas_status"] = 2
        env._update_done_flag(new_state)
        assert env.done == True
        assert env.reward == 9

    def test_port(self):
        env = MobilePhoneCarrierEnv()
        new_state = env.observation_space.sample()
        new_state["address_validation_status"] = 1
        new_state["device_validation_status"] = 1
        new_state["sim_validation_status"] = 1
        #
        new_state["new_mdn_status"] = 4
        new_state["existing_mdn_status"] = 3
        new_state["use_existing_mdn"] = 0
        new_state["payment_status"] = 1
        new_state["vas_status"] = 2
        env._port_existing_mdn(new_state)
        assert new_state["existing_mdn_status"] == 3
        assert env.reward == -1